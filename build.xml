<?xml version="1.0" encoding="UTF-8"?>
<project name="jirecon">

	<property file="local.properties" />
	<property name="src" value="src" />
	<property name="output" value="classes" />
	<property name="dist" value="dist" />
	<property name="doc" value="doc" />
	<property name="java.doc" value="${doc}/api" />
	<property name="run.arg.line" value="" />
	<property name="run.jvmarg.line" value="" />
	<property environment="system" />

	<condition property="build.label" value="build.label" else="">
		<isset property="label" />
	</condition>

	<property name="packname.lin64" value="${ant.project.name}-linux-x64-${label}" />
	<property name="packname.macosx" value="${ant.project.name}-macosx-${label}" />
	<property name="packname.src" value="${ant.project.name}-src-${label}" />

	<path id="compile.classpath">
		<fileset dir="lib" includes="*.jar" />
	</path>

	<path id="run.classpath">
		<path refid="compile.classpath" />
		<pathelement location="${output}" />
	</path>

	<target name="clean" description="Remove all compiled/generaged files and prepare for a compile/build.">
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${output}" />
			<fileset dir="${dist}" />
			<fileset dir="${doc}" />
		</delete>
	</target>

	<target name="compile">
		<mkdir dir="${output}" />
		<javac classpathref="compile.classpath" destdir="${output}" debug="true" fork="true" source="1.6" srcdir="src" target="1.6">
			<exclude name="org/jits/jirecon/test/Test*.java" />
		</javac>
	</target>

	<target name="run">
		<condition property="run.lib.native" value="macosx">
			<os family="mac" />
		</condition>
		<condition property="run.lib.native" value="linux-64">
			<and>
				<equals arg1="${os.name}" arg2="linux" casesensitive="false" trim="true" />
				<os arch="amd64" />
			</and>
		</condition>
		<condition else="" property="run.java.library.path" value="-Djava.library.path=${basedir}/lib/native/${run.lib.native}">
			<isset property="run.lib.native" />
		</condition>
		<java classname="org.jitsi.jirecon.test.JireconLauncher" classpathref="run.classpath" failonerror="true" fork="true">
			<jvmarg line="${run.java.library.path} ${run.jvmarg.line}" />
			<arg line="${run.arg.line}" />
		</java>
	</target>

	<target name="jar" depends="compile">
		<jar compress="true" destfile="jirecon.jar">
			<fileset casesensitive="no" dir="${output}">
				<include name="**/*.class" />
				<include name="**/*.properties" />
				<exclude name="${output}/jirecon.jar" />
			</fileset>
		</jar>
	</target>

	<target name="make" depends="compile,jar" description="Incrementally compile and jar/package the project." />

	<target name="rebuild" depends="clean,make" description="Clean and build the project." />

	<!-- JAVADOC -->
	<target name="javadoc" description="Generates project javadoc.">
		<javadoc author="true" destdir="${java.doc}" package="true" version="true" use="true" windowtitle="Jirecon API" classpathref="compile.classpath" source="1.5+" maxmemory="256m">
			<packageset dir="src">
				<include name="**" />
			</packageset>
			<tag name="todo" description="To do:" />
			<tag name="note" description="Note:" />
			<link href="${j2se_api}" />
			<header>
				<![CDATA[
                <b> Jirecon, the Jitsi recorder container. </b>
                ]]>
            </header>
		<bottom>
			<![CDATA[
                <font size="-1">
			<a href="http://jitsi.org"> Distributable under LGPL license. See terms of license at gnu.org. </a>
			<br>
				<a href="http://gnu.org"> Distributable under LGPL license. </a>
				<br>
				</font>
                ]]>
            </bottom>
		</javadoc>
	</target>

	<target name="dist.lin64" depends="make">
		<zip destfile="${dist}/linux/${packname.lin64}.zip">
			<zipfileset file="jirecon.jar" prefix="${packname.lin64}" />
			<zipfileset dir="lib" prefix="${packname.lin64}/lib">
				<exclude name="native/macosx/**" />
			</zipfileset>
			<zipfileset file="resources/install/linux-64/jvb.sh" prefix="${packname.lin64}" filemode="755" />
		</zip>
	</target>

	<target name="dist.macosx" depends="make">
		<zip destfile="${dist}/macosx/${packname.macosx}.zip">
			<zipfileset file="jirecon.jar" prefix="${packname.macosx}" />
			<zipfileset dir="lib" prefix="${packname.macosx}/lib">
				<exclude name="native/linux-64/**" />
			</zipfileset>
			<zipfileset file="resources/install/macosx/jvb.sh" prefix="${packname.macosx}" filemode="755" />
		</zip>
	</target>

	<target name="dist.src" depends="make">
		<zip destfile="${dist}/src/${packname.src}.zip">
			<zipfileset dir="." prefix="${packname.src}">
				<exclude name="classes/" />
				<exclude name="dist/" />
				<exclude name=".git/" />
				<exclude name="jirecon.jar" />
			</zipfileset>
		</zip>
	</target>

	<!-- build all binaries and the jirecon.jar for all supported platforms -->
	<target name="dist" depends="dist.lin64, dist.macosx, dist.src" />
</project>
